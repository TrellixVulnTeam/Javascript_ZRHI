{"remainingRequest":"/Users/kahlilbeasley/Desktop/Javascript/graphql_front_end/graphql/node_modules/babel-loader/lib/index.js!/Users/kahlilbeasley/Desktop/Javascript/graphql_front_end/graphql/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/kahlilbeasley/Desktop/Javascript/graphql_front_end/graphql/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kahlilbeasley/Desktop/Javascript/graphql_front_end/graphql/src/components/HelloWorld.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kahlilbeasley/Desktop/Javascript/graphql_front_end/graphql/src/components/HelloWorld.vue","mtime":1650078978774},{"path":"/Users/kahlilbeasley/Desktop/Javascript/graphql_front_end/graphql/babel.config.js","mtime":1650073060066},{"path":"/Users/kahlilbeasley/Desktop/Javascript/graphql_front_end/graphql/node_modules/cache-loader/dist/cjs.js","mtime":1650073051951},{"path":"/Users/kahlilbeasley/Desktop/Javascript/graphql_front_end/graphql/node_modules/babel-loader/lib/index.js","mtime":1650073052308},{"path":"/Users/kahlilbeasley/Desktop/Javascript/graphql_front_end/graphql/node_modules/cache-loader/dist/cjs.js","mtime":1650073051951},{"path":"/Users/kahlilbeasley/Desktop/Javascript/graphql_front_end/graphql/node_modules/vue-loader/lib/index.js","mtime":1650073052484}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwgZnJvbSAiL1VzZXJzL2thaGxpbGJlYXNsZXkvRGVza3RvcC9KYXZhc2NyaXB0L2dyYXBocWxfZnJvbnRfZW5kL2dyYXBocWwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbC5qcyI7Cgp2YXIgX3RlbXBsYXRlT2JqZWN0LCBfdGVtcGxhdGVPYmplY3QyOwoKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KdmFyIHF1ZXJpZXMgPSByZXF1aXJlKCcuLi8uLi9saWJyYXJpZXMvcXVlcmllcycpOwoKdmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnZ3JhcGhxbC10YWcnKSwKICAgIGdxbCA9IF9yZXF1aXJlLmdxbDsKCnZhciBnZXRBbGxGb29kID0gZ3FsKF90ZW1wbGF0ZU9iamVjdCB8fCAoX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbInF1ZXJ5IHtcbiAgY3VycmVudFVzZXIge1xuICAgIGlkXG4gICAgdXNlcm5hbWVcbiAgfVxufSJdKSkpOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0hlbGxvV29ybGQnLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBoZWFkZXJzOiBbewogICAgICAgIHRleHQ6ICdEZXNzZXJ0ICgxMDBnIHNlcnZpbmcpJywKICAgICAgICBhbGlnbjogJ3N0YXJ0JywKICAgICAgICBzb3J0YWJsZTogZmFsc2UsCiAgICAgICAgdmFsdWU6ICduYW1lJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0NhbG9yaWVzJywKICAgICAgICB2YWx1ZTogJ2NhbG9yaWVzJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0ZhdCAoZyknLAogICAgICAgIHZhbHVlOiAnZmF0JwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0NhcmJzIChnKScsCiAgICAgICAgdmFsdWU6ICdjYXJicycKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdQcm90ZWluIChnKScsCiAgICAgICAgdmFsdWU6ICdwcm90ZWluJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0lyb24gKCUpJywKICAgICAgICB2YWx1ZTogJ2lyb24nCiAgICAgIH1dLAogICAgICBkZXNzZXJ0czogW3sKICAgICAgICBuYW1lOiAnRnJvemVuIFlvZ3VydCcsCiAgICAgICAgY2Fsb3JpZXM6IDE1OSwKICAgICAgICBmYXQ6IDYuMCwKICAgICAgICBjYXJiczogMjQsCiAgICAgICAgcHJvdGVpbjogNC4wLAogICAgICAgIGlyb246ICcxJScKICAgICAgfSwgewogICAgICAgIG5hbWU6ICdJY2UgY3JlYW0gc2FuZHdpY2gnLAogICAgICAgIGNhbG9yaWVzOiAyMzcsCiAgICAgICAgZmF0OiA5LjAsCiAgICAgICAgY2FyYnM6IDM3LAogICAgICAgIHByb3RlaW46IDQuMywKICAgICAgICBpcm9uOiAnMSUnCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAnRWNsYWlyJywKICAgICAgICBjYWxvcmllczogMjYyLAogICAgICAgIGZhdDogMTYuMCwKICAgICAgICBjYXJiczogMjMsCiAgICAgICAgcHJvdGVpbjogNi4wLAogICAgICAgIGlyb246ICc3JScKICAgICAgfSwgewogICAgICAgIG5hbWU6ICdDdXBjYWtlJywKICAgICAgICBjYWxvcmllczogMzA1LAogICAgICAgIGZhdDogMy43LAogICAgICAgIGNhcmJzOiA2NywKICAgICAgICBwcm90ZWluOiA0LjMsCiAgICAgICAgaXJvbjogJzglJwogICAgICB9LCB7CiAgICAgICAgbmFtZTogJ0dpbmdlcmJyZWFkJywKICAgICAgICBjYWxvcmllczogMzU2LAogICAgICAgIGZhdDogMTYuMCwKICAgICAgICBjYXJiczogNDksCiAgICAgICAgcHJvdGVpbjogMy45LAogICAgICAgIGlyb246ICcxNiUnCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAnSmVsbHkgYmVhbicsCiAgICAgICAgY2Fsb3JpZXM6IDM3NSwKICAgICAgICBmYXQ6IDAuMCwKICAgICAgICBjYXJiczogOTQsCiAgICAgICAgcHJvdGVpbjogMC4wLAogICAgICAgIGlyb246ICcwJScKICAgICAgfSwgewogICAgICAgIG5hbWU6ICdMb2xsaXBvcCcsCiAgICAgICAgY2Fsb3JpZXM6IDM5MiwKICAgICAgICBmYXQ6IDAuMiwKICAgICAgICBjYXJiczogOTgsCiAgICAgICAgcHJvdGVpbjogMCwKICAgICAgICBpcm9uOiAnMiUnCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAnSG9uZXljb21iJywKICAgICAgICBjYWxvcmllczogNDA4LAogICAgICAgIGZhdDogMy4yLAogICAgICAgIGNhcmJzOiA4NywKICAgICAgICBwcm90ZWluOiA2LjUsCiAgICAgICAgaXJvbjogJzQ1JScKICAgICAgfSwgewogICAgICAgIG5hbWU6ICdEb251dCcsCiAgICAgICAgY2Fsb3JpZXM6IDQ1MiwKICAgICAgICBmYXQ6IDI1LjAsCiAgICAgICAgY2FyYnM6IDUxLAogICAgICAgIHByb3RlaW46IDQuOSwKICAgICAgICBpcm9uOiAnMjIlJwogICAgICB9LCB7CiAgICAgICAgbmFtZTogJ0tpdEthdCcsCiAgICAgICAgY2Fsb3JpZXM6IDUxOCwKICAgICAgICBmYXQ6IDI2LjAsCiAgICAgICAgY2FyYnM6IDY1LAogICAgICAgIHByb3RlaW46IDcsCiAgICAgICAgaXJvbjogJzYlJwogICAgICB9XQogICAgfTsKICB9LAogIGFwb2xsbzogewogICAgZ2V0QWxsRm9vZDogZ3FsKF90ZW1wbGF0ZU9iamVjdDIgfHwgKF90ZW1wbGF0ZU9iamVjdDIgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsicXVlcnkgR2V0QWxsRm9vZCB7XG4gICAgICAgIGZvb2Qge1xuICAgICAgICAgIG5hbWVcbiAgICAgICAgICBkZXNjcmlwdGlvblxuICAgICAgICAgIHByaWNlXG4gICAgICAgICAgcXVhbnRpdHlcbiAgICAgICAgICBzaWRlcyB7XG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9Il0pKSkKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICBjb25zb2xlLmxvZyh0aGlzLmFwb2xsbyk7CiAgfQp9Ow=="},{"version":3,"mappings":";;;;;;;;;;;;;;;AAYA;;AACA;AAAA;;AAEA;AAMA;AACAA,oBADA;AAEAC;AAAA;AACAC,gBACA;AACAC,sCADA;AAEAC,sBAFA;AAGAC,uBAHA;AAIAC;AAJA,OADA,EAOA;AAAAH;AAAAG;AAAA,OAPA,EAQA;AAAAH;AAAAG;AAAA,OARA,EASA;AAAAH;AAAAG;AAAA,OATA,EAUA;AAAAH;AAAAG;AAAA,OAVA,EAWA;AAAAH;AAAAG;AAAA,OAXA,CADA;AAcAC,iBACA;AACAP,6BADA;AAEAQ,qBAFA;AAGAC,gBAHA;AAIAC,iBAJA;AAKAC,oBALA;AAMAC;AANA,OADA,EASA;AACAZ,kCADA;AAEAQ,qBAFA;AAGAC,gBAHA;AAIAC,iBAJA;AAKAC,oBALA;AAMAC;AANA,OATA,EAiBA;AACAZ,sBADA;AAEAQ,qBAFA;AAGAC,iBAHA;AAIAC,iBAJA;AAKAC,oBALA;AAMAC;AANA,OAjBA,EAyBA;AACAZ,uBADA;AAEAQ,qBAFA;AAGAC,gBAHA;AAIAC,iBAJA;AAKAC,oBALA;AAMAC;AANA,OAzBA,EAiCA;AACAZ,2BADA;AAEAQ,qBAFA;AAGAC,iBAHA;AAIAC,iBAJA;AAKAC,oBALA;AAMAC;AANA,OAjCA,EAyCA;AACAZ,0BADA;AAEAQ,qBAFA;AAGAC,gBAHA;AAIAC,iBAJA;AAKAC,oBALA;AAMAC;AANA,OAzCA,EAiDA;AACAZ,wBADA;AAEAQ,qBAFA;AAGAC,gBAHA;AAIAC,iBAJA;AAKAC,kBALA;AAMAC;AANA,OAjDA,EAyDA;AACAZ,yBADA;AAEAQ,qBAFA;AAGAC,gBAHA;AAIAC,iBAJA;AAKAC,oBALA;AAMAC;AANA,OAzDA,EAiEA;AACAZ,qBADA;AAEAQ,qBAFA;AAGAC,iBAHA;AAIAC,iBAJA;AAKAC,oBALA;AAMAC;AANA,OAjEA,EAyEA;AACAZ,sBADA;AAEAQ,qBAFA;AAGAC,iBAHA;AAIAC,iBAJA;AAKAC,kBALA;AAMAC;AANA,OAzEA;AAdA;AAAA,GAFA;AAmGAC;AACAC;AADA,GAnGA;AAgHAC,SAhHA,qBAgHA;AAEAC;AACA;AAnHA","names":["name","data","headers","text","align","sortable","value","desserts","calories","fat","carbs","protein","iron","apollo","getAllFood","mounted","console"],"sourceRoot":"src/components","sources":["HelloWorld.vue"],"sourcesContent":["<template>\n  <v-container>\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"desserts\"\n      :items-per-page=\"5\"\n      class=\"elevation-1\"\n    ></v-data-table>\n  </v-container>\n</template>\n\n<script>\nconst queries = require('../../libraries/queries')\nconst { gql } = require('graphql-tag')\n\nconst getAllFood = gql`query {\n  currentUser {\n    id\n    username\n  }\n}`;\n  export default {\n    name: 'HelloWorld',\n    data: () => ({\n      headers: [\n        {\n          text: 'Dessert (100g serving)',\n          align: 'start',\n          sortable: false,\n          value: 'name',\n        },\n        { text: 'Calories', value: 'calories' },\n        { text: 'Fat (g)', value: 'fat' },\n        { text: 'Carbs (g)', value: 'carbs' },\n        { text: 'Protein (g)', value: 'protein' },\n        { text: 'Iron (%)', value: 'iron' },\n      ],\n      desserts: [\n        {\n          name: 'Frozen Yogurt',\n          calories: 159,\n          fat: 6.0,\n          carbs: 24,\n          protein: 4.0,\n          iron: '1%',\n        },\n        {\n          name: 'Ice cream sandwich',\n          calories: 237,\n          fat: 9.0,\n          carbs: 37,\n          protein: 4.3,\n          iron: '1%',\n        },\n        {\n          name: 'Eclair',\n          calories: 262,\n          fat: 16.0,\n          carbs: 23,\n          protein: 6.0,\n          iron: '7%',\n        },\n        {\n          name: 'Cupcake',\n          calories: 305,\n          fat: 3.7,\n          carbs: 67,\n          protein: 4.3,\n          iron: '8%',\n        },\n        {\n          name: 'Gingerbread',\n          calories: 356,\n          fat: 16.0,\n          carbs: 49,\n          protein: 3.9,\n          iron: '16%',\n        },\n        {\n          name: 'Jelly bean',\n          calories: 375,\n          fat: 0.0,\n          carbs: 94,\n          protein: 0.0,\n          iron: '0%',\n        },\n        {\n          name: 'Lollipop',\n          calories: 392,\n          fat: 0.2,\n          carbs: 98,\n          protein: 0,\n          iron: '2%',\n        },\n        {\n          name: 'Honeycomb',\n          calories: 408,\n          fat: 3.2,\n          carbs: 87,\n          protein: 6.5,\n          iron: '45%',\n        },\n        {\n          name: 'Donut',\n          calories: 452,\n          fat: 25.0,\n          carbs: 51,\n          protein: 4.9,\n          iron: '22%',\n        },\n        {\n          name: 'KitKat',\n          calories: 518,\n          fat: 26.0,\n          carbs: 65,\n          protein: 7,\n          iron: '6%',\n        },\n      ],\n    }),\n    apollo: {\n      getAllFood: gql`query GetAllFood {\n        food {\n          name\n          description\n          price\n          quantity\n          sides {\n            name\n          }\n        }\n      }`\n    },\n    mounted() {\n      \n      console.log(this.apollo)\n    }\n  }\n</script>\n"]}]}